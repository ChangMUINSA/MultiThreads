package PACKAGE_NAME.ThreadSynchronization;

public class Definition {
    /**
     * 线程同步
     * 形成条件： 队列 加 锁
     * 多个线程操作同一个资源
     * 并发： 同一个对象被多个线程同时操作
     * 处理多线程问题时， 多个线程访问同一个对象，并且某些线程还想修改这个对象，这时候我们就需要线程同步
     * 线程同步其实就是一种等待机制，多个需要同时访问此对象的线程进入这个对象的等待池形成队列，等待前面线程使用完毕，下一个线程再使用
     * 由于同一个进程的多个线程共享同一块储空间，在带来方便的同时，也带来了访问冲突问题
     * 为了保证数据在方法中被访问时的正确性，在访问时加入锁机制
     * synchronized,当一个获得对象的排他锁，独占资源，其他线程必须等待，使用后释放锁即可，存在以下问题：
     * 一个线程持有锁会导致其他所有持有此锁的线程挂起
     * 在多线程竞争下，加锁，释放锁会导致比较多的上下文切换 和 调度延时，引起性能问题
     * 如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题
     */

}
