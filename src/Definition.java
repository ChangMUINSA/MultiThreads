package PACKAGE_NAME;
public class Definition {
    /**
     * 普通方法，只有主线程一条执行路径
     * 多线程，多条执行路径，主线程和子线程并行交替执行
     *
     * 程序是一个静态的概念，是指令和数据的有序集合，其本身没有任何运行的含义
     * 而进程则是指程序执行的一次过程，它是一个动态的概念，是系统资源分配的单位.
     * 通常一个进程中可以包含若干个线程，当然一个进程中至少有一个线程（main主线程），不然就没有存在的意义.线程是CPU调度和执行的单位.
     *
     * 很多多线程是模拟出来的，真正的多线程是指有多个CPU，即多核，如服务器. 如果是模拟出来的多线程，即在一个CPU的情况下，在同一个时间点，CPU只能执行一个代码，因为切换的很快，所以就有同时执行的错觉.
     *
     * 线程就是独立执行的路径
     * 在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程（垃圾回收线程）；
     * main()线程称为主线程，为系统的入口，用于执行整个程序.
     * 在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器食欲操作系统紧密相关的，先后顺序是不呢个人为干预的.
     * 对同一份资源操作时，会存在资源抢夺的问题，需要加入并发控制.
     * 线程会带来额外的开销，如CPU调度时间；并发控制开销.
     * 每个线程在自己的工作内存交互，内存控制不当会造成数据不一致.
     *
     * 实现多线程的三种方式
     * Thread class 继承Thread类（重点）
     * Runnable接口 实现Runnable接口（重点）
     * Callable接口 （了解）
     */
}
