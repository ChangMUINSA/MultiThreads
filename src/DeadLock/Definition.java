package PACKAGE_NAME.DeadLock;

public class Definition {
    /**
     * 死锁
     * 多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才能运行
     * 而导致两个或者多个线程都在等待对方释放资源，都停止执行的情形
     * 某一个同步块同时拥有"两个以上对象的锁"时，就可能发生"死锁"问题.
     */
    /**
     * 死锁避免方法
     *
     * 产生死锁的四个必要条件
     * 互斥条件： 一个资源每次只能被一个线程使用
     * 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放
     * 不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺
     * 循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系
     *
     * 上面列出了死锁的四个必要条件，我们只要想办法破坏其中任意一个或多个条件就可以避免死锁发生.
     */
}
